
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign
import groovy.swing.SwingBuilder

plugins {
  id 'net.researchgate.release' version '2.0.2'
}

repositories {
  mavenLocal()
  mavenCentral()
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.5.1'
}

project.ext {
  ccVersion = '1.0.6'
	commonsTextVersion = '1.1'
	gsonVersion = '2.8.1'
	guavaVersion = '22.0'
	javapoetVersion = '1.9.0'
  snifferVersion = '1.15'
  testngVersion = '6.11'

  isRelease = !version.endsWith('SNAPSHOT')
  isUpload = false
  isSign = false
}

apply plugin: 'net.researchgate.release'

// Sign release archives
gradle.taskGraph.whenReady { taskGraph ->
	ext.isUpload = taskGraph.allTasks.any { it instanceof Upload }
	ext.isSign = taskGraph.allTasks.any { it instanceof Sign }
	//if (isRelease && isUpload && isSign) {
  if (isSign) {
		def password
		new SwingBuilder().edt {
				dialog(
					modal: true, title: 'Enter signing credentials',
					preferredSize: [300,100], alwaysOnTop: true,
					resizable: true, locationRelativeTo: null,
					pack: true, show: true
				) {
						vbox {
								label(text: "Key passphrase:")
								textField id: "keyText", input = passwordField(), preferredSize: [100, 20]
								button(defaultButton: true, text: 'OK', actionPerformed: {
										password = keyText.text;
										dispose();
								})
						}
				}
		}

		if (password == null || password == "") {
			throw new InvalidUserDataException("ERROR: signing password is null or empty.")
		}
		allprojects { ext.'signing.password' = password }
	}
}


subprojects {
  apply plugin: 'eclipse'
  apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'jacoco'
  apply plugin: 'signing'

  group = 'com.squarespace.cldr'
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenLocal()
    mavenCentral()
  }

  configurations {
    tests {
      extendsFrom testRuntime
    }

    animalSniffer
    javaApiSignature
  }

	dependencies {
		testCompile "org.testng:testng:${testngVersion}"

		animalSniffer("org.codehaus.mojo:animal-sniffer-ant-tasks:${snifferVersion}")
		javaApiSignature("org.codehaus.mojo.signature:java18:1.0@signature")
	}

	// Disable Javadoc linting under Java 8
	if (JavaVersion.current().isJava8Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addStringOption('Xdoclint:none', '-quiet')
			}
		}
	}

	task testJar(type: Jar, dependsOn: testClasses) {
		classifier = 'tests'
		from(
			sourceSets.main.output,
			sourceSets.test.output
		)
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn:javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	signing {
		required { isRelease && isUpload }
		sign configurations.archives
	}

	task copyJavaApiSignature(type: Copy) {
			from configurations.javaApiSignature
			into "$buildDir/javaApiSignature/"
			rename '.*signature', 'javaApi.signature'
	}

	task checkJavaApiSignature << {
			ant.taskdef(
				name: 'animalSniffer',
				classname: 'org.codehaus.mojo.animal_sniffer.ant.CheckSignatureTask',
				classpath: configurations.animalSniffer.asPath
			)
			ant.animalSniffer(
				signature: "$buildDir/javaApiSignature/javaApi.signature",
				classpath: configurations.compile.asPath
			) { path(path: "$buildDir/classes/main") }
	}

	checkJavaApiSignature.dependsOn compileJava
	checkJavaApiSignature.dependsOn copyJavaApiSignature
	check.dependsOn checkJavaApiSignature

	artifacts {
		archives sourcesJar
		archives testJar
		archives javadocJar
		tests testJar
	}

  clean {
		delete 'src/generated'
	}

	test {
		useTestNG()
		jacoco {
			append = false
		}
	}

	uploadArchives {
		repositories.mavenDeployer {
			beforeDeployment {
				MavenDeployment deployment -> signing.signPom(deployment)
			}

			if (project.hasProperty('OSS_USERNAME') && project.hasProperty('OSS_PASSWORD')) {
				repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
					authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
				}

				snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
					authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
				}
			} else {
				logger.error('Missing OSS_USERNAME, OSS_PASSWORD properties.')
			}

			configurePom(pom)
		}
	}

	if (project.hasProperty('NEXUS_INTERNAL_RELEASE_URL')) {
		task uploadInternal(type: Upload) {
			description = 'Uploads archives to internal Nexus'
			configuration = configurations.archives

			repositories.mavenDeployer {
				repository(url: NEXUS_INTERNAL_RELEASE_URL)
				snapshotRepository(url: NEXUS_INTERNAL_SNAPSHOT_URL) {
					authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
				}
				configurePom(pom)
			}
		}
	}

}

def configurePom(def pom) {
  pom.project {
    name 'cldr'
    description "Squarespace CLDR"
    url 'https://github.com/squarespace/cldr'

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }

    scm {
      connection 'scm:git:git@github.com:squarespace/cldr.git'
      url 'scm:git:git@github.com:squarespace/cldr.git'
      developerConnection 'scm:git:git@github.com:squarespace/cldr.git'
    }

    issueManagement {
      system 'github'
      url 'https://github.com/squarespace/cldr/issues'
    }

    developers {
      developer {
        id 'pathensley'
        name 'Patrick Hensley'
        email 'pathensley@gmail.com'
      }
    }
  }
}

