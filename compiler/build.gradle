
dependencies {
  compile project(':cldr-core')

  compile "com.google.code.gson:gson:${gsonVersion}"
  compile "com.squareup:javapoet:${javapoetVersion}"
  compile "com.google.guava:guava:${guavaVersion}"
  compile "org.apache.commons:commons-text:${commonsTextVersion}"
}

task generateCode(type: GenerateCode, dependsOn: classes) {
  // regenerate code if cldr json files or compiler classes change
  inputFiles = fileTree(
    dir: "${project.projectDir}/src/main/resources/data",
    include: '**/*.json'
  ).plus(fileTree(
    dir: "${buildDir}/classes"
  ))
  outputDir = file("${rootProject.projectDir}/runtime/src/generated/java")
}

class GenerateCode extends DefaultTask {

  @InputFiles
  FileCollection inputFiles

  @OutputDirectory
  File outputDir

  @TaskAction
  def generate() {
    project.javaexec {
      // need to use javaexec since Generate class cannot be
      // directly imported into a build script.
      classpath = project.sourceSets.main.runtimeClasspath
      main = 'com.squarespace.cldr.codegen.Generate'
      args outputDir
    }
  }

}

