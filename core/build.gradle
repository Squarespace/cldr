

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign
import groovy.swing.SwingBuilder

buildscript {
  dependencies {
    classpath files(
      "../buildSrc/build/classes/main",
      "../buildSrc/build/resources/main"
    )
  }
}

plugins {
  id 'me.champeau.gradle.jmh' version '0.3.1'
}

apply plugin: 'com.squarespace.cldr.codegen'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  tests {
    extendsFrom testRuntime
  }
  animalSniffer
  javaApiSignature
}

dependencies {
  compile "com.squarespace.compiler:compiler-core:${ccVersion}"

  testCompile "org.testng:testng:${testngVersion}"

	animalSniffer("org.codehaus.mojo:animal-sniffer-ant-tasks:${snifferVersion}")
	javaApiSignature("org.codehaus.mojo.signature:java18:1.0@signature")
}

cldr {
  outputDir = "${project.projectDir}/src/generated/java"
}

// Disable Javadoc linting under Java 8
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

sourceSets.main.java.srcDirs = ['src/main/java', 'src/generated/java']

task testJar(type: Jar, dependsOn: testClasses) {
	classifier = 'tests'
	from(
		sourceSets.main.output,
		sourceSets.test.output
	)
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

signing {
  //required { isRelease && isUpload }
  required { isUpload }
  sign configurations.archives
}

task copyJavaApiSignature(type: Copy) {
		from configurations.javaApiSignature
		into "$buildDir/javaApiSignature/"
		rename '.*signature', 'javaApi.signature'
}

task checkJavaApiSignature << {
		ant.taskdef(
			name: 'animalSniffer',
			classname: 'org.codehaus.mojo.animal_sniffer.ant.CheckSignatureTask',
			classpath: configurations.animalSniffer.asPath
		)
		ant.animalSniffer(
			signature: "$buildDir/javaApiSignature/javaApi.signature",
			classpath: configurations.compile.asPath
		) { path(path: "$buildDir/classes/main") }
}

checkJavaApiSignature.dependsOn compileJava
checkJavaApiSignature.dependsOn copyJavaApiSignature
check.dependsOn checkJavaApiSignature

artifacts {
  archives sourcesJar
  archives testJar
  archives javadocJar
  tests testJar
}

jmh {
	jmhVersion '1.19'
	forceGC = true
  includeTests = false
  zip64 = true
}

plugins.withType(EclipsePlugin) {
  project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
}

clean {
  delete 'src/generated'
}

// Sign release archives
gradle.taskGraph.whenReady { taskGraph ->
  ext.isUpload = taskGraph.allTasks.any { it instanceof Upload }
  ext.isSign = taskGraph.allTasks.any { it instanceof Sign }
//  if (isRelease && isUpload && isSign) {
  if (isUpload && isSign) {
    def password
    new SwingBuilder().edt {
        dialog(modal: true, title: 'Enter credentials', alwaysOnTop: true, resizable: true,
                locationRelativeTo: null, pack: true, show: true
        ) {
            vbox {
                label(text: "Key passphrase:")
                textField id: "keyText", input = passwordField()
                button(defaultButton: true, text: 'OK', actionPerformed: {
                    password = keyText.text;
                    dispose();
                })
            }
        }
    }

    allprojects { ext.'signing.password' = password }
  }
}

uploadArchives {
  repositories.mavenDeployer {
    beforeDeployment {
      MavenDeployment deployment -> signing.signPom(deployment)
    }

    if (project.hasProperty('OSS_USERNAME') && project.hasProperty('OSS_PASSWORD')) {
      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
      }
    } else {
      logger.error('Missing OSS_USERNAME, OSS_PASSWORD properties.')
    }

    configurePom(pom)
  }
}

if (project.hasProperty('NEXUS_INTERNAL_RELEASE_URL')) {
  task uploadInternal(type: Upload) {
    description = 'Uploads archives to internal Nexus'
    configuration = configurations.archives

    repositories.mavenDeployer {
      repository(url: NEXUS_INTERNAL_RELEASE_URL)
      snapshotRepository(url: NEXUS_INTERNAL_SNAPSHOT_URL) {
        authentication(userName: OSS_USERNAME, password: OSS_PASSWORD)
      }
      configurePom(pom)
    }
  }
}

